// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// nd_nhpp_fit
Rcpp::List nd_nhpp_fit(const Eigen::ArrayXd& r, const Eigen::MatrixXi& n_j, const Eigen::ArrayXd& d, const int& L, const int& K, const int& J, const double& mu_0, const double& kappa_0, const int& nu_0, const double& sigma_0, const double& a_alpha, const double& b_alpha, const double& a_rho, const double& b_rho, const int& iter_max, const int& warm_up, const int& thin, const int& seed, const int& chain, const int& num_posterior_samples);
RcppExport SEXP _bendr_nd_nhpp_fit(SEXP rSEXP, SEXP n_jSEXP, SEXP dSEXP, SEXP LSEXP, SEXP KSEXP, SEXP JSEXP, SEXP mu_0SEXP, SEXP kappa_0SEXP, SEXP nu_0SEXP, SEXP sigma_0SEXP, SEXP a_alphaSEXP, SEXP b_alphaSEXP, SEXP a_rhoSEXP, SEXP b_rhoSEXP, SEXP iter_maxSEXP, SEXP warm_upSEXP, SEXP thinSEXP, SEXP seedSEXP, SEXP chainSEXP, SEXP num_posterior_samplesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXi& >::type n_j(n_jSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const int& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type J(JSEXP);
    Rcpp::traits::input_parameter< const double& >::type mu_0(mu_0SEXP);
    Rcpp::traits::input_parameter< const double& >::type kappa_0(kappa_0SEXP);
    Rcpp::traits::input_parameter< const int& >::type nu_0(nu_0SEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma_0(sigma_0SEXP);
    Rcpp::traits::input_parameter< const double& >::type a_alpha(a_alphaSEXP);
    Rcpp::traits::input_parameter< const double& >::type b_alpha(b_alphaSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_rho(a_rhoSEXP);
    Rcpp::traits::input_parameter< const double& >::type b_rho(b_rhoSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter_max(iter_maxSEXP);
    Rcpp::traits::input_parameter< const int& >::type warm_up(warm_upSEXP);
    Rcpp::traits::input_parameter< const int& >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< const int& >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< const int& >::type chain(chainSEXP);
    Rcpp::traits::input_parameter< const int& >::type num_posterior_samples(num_posterior_samplesSEXP);
    rcpp_result_gen = Rcpp::wrap(nd_nhpp_fit(r, n_j, d, L, K, J, mu_0, kappa_0, nu_0, sigma_0, a_alpha, b_alpha, a_rho, b_rho, iter_max, warm_up, thin, seed, chain, num_posterior_samples));
    return rcpp_result_gen;
END_RCPP
}
// nd_nhpp_fixed_fit
Rcpp::List nd_nhpp_fixed_fit(const Eigen::ArrayXd& r, const Eigen::MatrixXi& n_j, const Eigen::ArrayXd& d, const int& L, const int& K, const int& J, const double& mu_0, const double& kappa_0, const int& nu_0, const double& sigma_0, const double& alpha, const double& rho, const int& iter_max, const int& warm_up, const int& thin, const int& seed, const int& chain, const int& num_posterior_samples);
RcppExport SEXP _bendr_nd_nhpp_fixed_fit(SEXP rSEXP, SEXP n_jSEXP, SEXP dSEXP, SEXP LSEXP, SEXP KSEXP, SEXP JSEXP, SEXP mu_0SEXP, SEXP kappa_0SEXP, SEXP nu_0SEXP, SEXP sigma_0SEXP, SEXP alphaSEXP, SEXP rhoSEXP, SEXP iter_maxSEXP, SEXP warm_upSEXP, SEXP thinSEXP, SEXP seedSEXP, SEXP chainSEXP, SEXP num_posterior_samplesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXi& >::type n_j(n_jSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const int& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type J(JSEXP);
    Rcpp::traits::input_parameter< const double& >::type mu_0(mu_0SEXP);
    Rcpp::traits::input_parameter< const double& >::type kappa_0(kappa_0SEXP);
    Rcpp::traits::input_parameter< const int& >::type nu_0(nu_0SEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma_0(sigma_0SEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter_max(iter_maxSEXP);
    Rcpp::traits::input_parameter< const int& >::type warm_up(warm_upSEXP);
    Rcpp::traits::input_parameter< const int& >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< const int& >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< const int& >::type chain(chainSEXP);
    Rcpp::traits::input_parameter< const int& >::type num_posterior_samples(num_posterior_samplesSEXP);
    rcpp_result_gen = Rcpp::wrap(nd_nhpp_fixed_fit(r, n_j, d, L, K, J, mu_0, kappa_0, nu_0, sigma_0, alpha, rho, iter_max, warm_up, thin, seed, chain, num_posterior_samples));
    return rcpp_result_gen;
END_RCPP
}
// beta_nd_nhpp_fit
Rcpp::List beta_nd_nhpp_fit(const Eigen::ArrayXd& r, const Eigen::MatrixXi& n_j, const Eigen::VectorXd& d, double& mu_sd, double& tau_sd, const int& L, const int& K, const int& J, const double& a_0, const double& b_0, const double& a_alpha, const double& b_alpha, const double& a_rho, const double& b_rho, const int& iter_max, const int& warm_up, const int& thin, const int& seed, const int& chain);
RcppExport SEXP _bendr_beta_nd_nhpp_fit(SEXP rSEXP, SEXP n_jSEXP, SEXP dSEXP, SEXP mu_sdSEXP, SEXP tau_sdSEXP, SEXP LSEXP, SEXP KSEXP, SEXP JSEXP, SEXP a_0SEXP, SEXP b_0SEXP, SEXP a_alphaSEXP, SEXP b_alphaSEXP, SEXP a_rhoSEXP, SEXP b_rhoSEXP, SEXP iter_maxSEXP, SEXP warm_upSEXP, SEXP thinSEXP, SEXP seedSEXP, SEXP chainSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXi& >::type n_j(n_jSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type d(dSEXP);
    Rcpp::traits::input_parameter< double& >::type mu_sd(mu_sdSEXP);
    Rcpp::traits::input_parameter< double& >::type tau_sd(tau_sdSEXP);
    Rcpp::traits::input_parameter< const int& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type J(JSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_0(a_0SEXP);
    Rcpp::traits::input_parameter< const double& >::type b_0(b_0SEXP);
    Rcpp::traits::input_parameter< const double& >::type a_alpha(a_alphaSEXP);
    Rcpp::traits::input_parameter< const double& >::type b_alpha(b_alphaSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_rho(a_rhoSEXP);
    Rcpp::traits::input_parameter< const double& >::type b_rho(b_rhoSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter_max(iter_maxSEXP);
    Rcpp::traits::input_parameter< const int& >::type warm_up(warm_upSEXP);
    Rcpp::traits::input_parameter< const int& >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< const int& >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< const int& >::type chain(chainSEXP);
    rcpp_result_gen = Rcpp::wrap(beta_nd_nhpp_fit(r, n_j, d, mu_sd, tau_sd, L, K, J, a_0, b_0, a_alpha, b_alpha, a_rho, b_rho, iter_max, warm_up, thin, seed, chain));
    return rcpp_result_gen;
END_RCPP
}
// beta_nd_nhpp_fit_multiple_taus
Rcpp::List beta_nd_nhpp_fit_multiple_taus(const Eigen::VectorXd& r, const Eigen::MatrixXi& n_j, const Eigen::VectorXd& d, double& mu_sd, double& tau_sd, const int& L, const int& K, const int& J, const double& a_0, const double& b_0, const double& a_alpha, const double& b_alpha, const double& a_rho, const double& b_rho, const int& iter_max, const int& warm_up, const int& thin, const int& seed, const int& chain);
RcppExport SEXP _bendr_beta_nd_nhpp_fit_multiple_taus(SEXP rSEXP, SEXP n_jSEXP, SEXP dSEXP, SEXP mu_sdSEXP, SEXP tau_sdSEXP, SEXP LSEXP, SEXP KSEXP, SEXP JSEXP, SEXP a_0SEXP, SEXP b_0SEXP, SEXP a_alphaSEXP, SEXP b_alphaSEXP, SEXP a_rhoSEXP, SEXP b_rhoSEXP, SEXP iter_maxSEXP, SEXP warm_upSEXP, SEXP thinSEXP, SEXP seedSEXP, SEXP chainSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXi& >::type n_j(n_jSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type d(dSEXP);
    Rcpp::traits::input_parameter< double& >::type mu_sd(mu_sdSEXP);
    Rcpp::traits::input_parameter< double& >::type tau_sd(tau_sdSEXP);
    Rcpp::traits::input_parameter< const int& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type J(JSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_0(a_0SEXP);
    Rcpp::traits::input_parameter< const double& >::type b_0(b_0SEXP);
    Rcpp::traits::input_parameter< const double& >::type a_alpha(a_alphaSEXP);
    Rcpp::traits::input_parameter< const double& >::type b_alpha(b_alphaSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_rho(a_rhoSEXP);
    Rcpp::traits::input_parameter< const double& >::type b_rho(b_rhoSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter_max(iter_maxSEXP);
    Rcpp::traits::input_parameter< const int& >::type warm_up(warm_upSEXP);
    Rcpp::traits::input_parameter< const int& >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< const int& >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< const int& >::type chain(chainSEXP);
    rcpp_result_gen = Rcpp::wrap(beta_nd_nhpp_fit_multiple_taus(r, n_j, d, mu_sd, tau_sd, L, K, J, a_0, b_0, a_alpha, b_alpha, a_rho, b_rho, iter_max, warm_up, thin, seed, chain));
    return rcpp_result_gen;
END_RCPP
}
// nhpp_gamma
Rcpp::List nhpp_gamma(const int& warm_up, const int& iter_max, Eigen::ArrayXXd& input_X, Eigen::ArrayXd& input_n_j, const double adapt_delta, const int& seed);
RcppExport SEXP _bendr_nhpp_gamma(SEXP warm_upSEXP, SEXP iter_maxSEXP, SEXP input_XSEXP, SEXP input_n_jSEXP, SEXP adapt_deltaSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type warm_up(warm_upSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter_max(iter_maxSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXXd& >::type input_X(input_XSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXd& >::type input_n_j(input_n_jSEXP);
    Rcpp::traits::input_parameter< const double >::type adapt_delta(adapt_deltaSEXP);
    Rcpp::traits::input_parameter< const int& >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(nhpp_gamma(warm_up, iter_max, input_X, input_n_j, adapt_delta, seed));
    return rcpp_result_gen;
END_RCPP
}
// green_loss_unknown
Eigen::ArrayXd green_loss_unknown(const Eigen::ArrayXXi& cluster_assignment, const Eigen::ArrayXXd& pmat, const double& tau);
RcppExport SEXP _bendr_green_loss_unknown(SEXP cluster_assignmentSEXP, SEXP pmatSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXXi& >::type cluster_assignment(cluster_assignmentSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXXd& >::type pmat(pmatSEXP);
    Rcpp::traits::input_parameter< const double& >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(green_loss_unknown(cluster_assignment, pmat, tau));
    return rcpp_result_gen;
END_RCPP
}
// green_loss_known
Eigen::ArrayXd green_loss_known(const Eigen::ArrayXXi& cluster_assignment, const Eigen::ArrayXXd& pmat, const Eigen::ArrayXXi& true_cluster_assignment, const double& a, const double& b);
RcppExport SEXP _bendr_green_loss_known(SEXP cluster_assignmentSEXP, SEXP pmatSEXP, SEXP true_cluster_assignmentSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXXi& >::type cluster_assignment(cluster_assignmentSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXXd& >::type pmat(pmatSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXXi& >::type true_cluster_assignment(true_cluster_assignmentSEXP);
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(green_loss_known(cluster_assignment, pmat, true_cluster_assignment, a, b));
    return rcpp_result_gen;
END_RCPP
}
// square_error
Eigen::ArrayXd square_error(const Eigen::ArrayXXi& cluster_assignment, const Eigen::ArrayXXd& pmat);
RcppExport SEXP _bendr_square_error(SEXP cluster_assignmentSEXP, SEXP pmatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXXi& >::type cluster_assignment(cluster_assignmentSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXXd& >::type pmat(pmatSEXP);
    rcpp_result_gen = Rcpp::wrap(square_error(cluster_assignment, pmat));
    return rcpp_result_gen;
END_RCPP
}
// nd_nhpp_multivariate_fit
Rcpp::List nd_nhpp_multivariate_fit(const Eigen::ArrayXXd& r, const Eigen::MatrixXi& n_j, const Eigen::ArrayXd& d, const int& L, const int& K, const int& J, const double& mu_0, const double& kappa_0, const int& nu_0, const double& sigma_0, const double& a_alpha, const double& b_alpha, const double& a_rho, const double& b_rho, const int& iter_max, const int& warm_up, const int& thin, const int& seed, const int& chain, const int& num_posterior_samples);
RcppExport SEXP _bendr_nd_nhpp_multivariate_fit(SEXP rSEXP, SEXP n_jSEXP, SEXP dSEXP, SEXP LSEXP, SEXP KSEXP, SEXP JSEXP, SEXP mu_0SEXP, SEXP kappa_0SEXP, SEXP nu_0SEXP, SEXP sigma_0SEXP, SEXP a_alphaSEXP, SEXP b_alphaSEXP, SEXP a_rhoSEXP, SEXP b_rhoSEXP, SEXP iter_maxSEXP, SEXP warm_upSEXP, SEXP thinSEXP, SEXP seedSEXP, SEXP chainSEXP, SEXP num_posterior_samplesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXXd& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXi& >::type n_j(n_jSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const int& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type J(JSEXP);
    Rcpp::traits::input_parameter< const double& >::type mu_0(mu_0SEXP);
    Rcpp::traits::input_parameter< const double& >::type kappa_0(kappa_0SEXP);
    Rcpp::traits::input_parameter< const int& >::type nu_0(nu_0SEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma_0(sigma_0SEXP);
    Rcpp::traits::input_parameter< const double& >::type a_alpha(a_alphaSEXP);
    Rcpp::traits::input_parameter< const double& >::type b_alpha(b_alphaSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_rho(a_rhoSEXP);
    Rcpp::traits::input_parameter< const double& >::type b_rho(b_rhoSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter_max(iter_maxSEXP);
    Rcpp::traits::input_parameter< const int& >::type warm_up(warm_upSEXP);
    Rcpp::traits::input_parameter< const int& >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< const int& >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< const int& >::type chain(chainSEXP);
    Rcpp::traits::input_parameter< const int& >::type num_posterior_samples(num_posterior_samplesSEXP);
    rcpp_result_gen = Rcpp::wrap(nd_nhpp_multivariate_fit(r, n_j, d, L, K, J, mu_0, kappa_0, nu_0, sigma_0, a_alpha, b_alpha, a_rho, b_rho, iter_max, warm_up, thin, seed, chain, num_posterior_samples));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bendr_nd_nhpp_fit", (DL_FUNC) &_bendr_nd_nhpp_fit, 20},
    {"_bendr_nd_nhpp_fixed_fit", (DL_FUNC) &_bendr_nd_nhpp_fixed_fit, 18},
    {"_bendr_beta_nd_nhpp_fit", (DL_FUNC) &_bendr_beta_nd_nhpp_fit, 19},
    {"_bendr_beta_nd_nhpp_fit_multiple_taus", (DL_FUNC) &_bendr_beta_nd_nhpp_fit_multiple_taus, 19},
    {"_bendr_nhpp_gamma", (DL_FUNC) &_bendr_nhpp_gamma, 6},
    {"_bendr_green_loss_unknown", (DL_FUNC) &_bendr_green_loss_unknown, 3},
    {"_bendr_green_loss_known", (DL_FUNC) &_bendr_green_loss_known, 5},
    {"_bendr_square_error", (DL_FUNC) &_bendr_square_error, 2},
    {"_bendr_nd_nhpp_multivariate_fit", (DL_FUNC) &_bendr_nd_nhpp_multivariate_fit, 20},
    {NULL, NULL, 0}
};

RcppExport void R_init_bendr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
